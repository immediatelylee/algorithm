탐색이란?

많은 양의 데이터 중에서 원하는 데이터를 찾는 과정을 의미. 프로그래밍에서는 그래프, 트리 등의 자료구조 안에서 탐색을 하는 문제를 자주 다룬다.

대표적인 탐색 알고리즘으로 DFS와 BFS를 꼽을 수 있음. 그런데 이 2개를 이해할려면 스택과 큐, 재귀 함수에 대한 이해가 필요함.

자료구조란? : "데이터를 표현하고 관리하고 처리하기 위한 구조"를 의미한다. 그 중 스택과 큐는 자료구즈의 기초개념으로 다음의 두 핵심적인 함수로 구성됨.

* 삽입(PUSH) : 데이터를 삽입.
* 삭제(POP) : 데이터를 삭제.
물론 실제로 스택과 큐를 사용할 때는 삽입과 삭제 이외에도 오버플로와 언더플로를 고민해야 한다.
오버플로 : 특정한 자료구조가 수용할 수 있는 데이터 크기를 이미 가득 찬 상태에서 삽입연산을 수행할 때 발생한다. 즉 공간을 벗어나 데이터가 넘쳐흐를 때 발생한다.

언더플로 : 특정한 자료구조에 전혀 들어 있지 않은 상태에서 삭제 연산을 수행하면 데이터가 전혀 없는 상태

스택
스택이란? 박스 쌓기에 비유할 수 있다. 선입후출, 후입선출

입구와 출구가 동일한 바구니가 있다고 생각하면 된다.

파이썬에서 스택을 이용할 때에는 별도의 라이브러리를 사용할 필요가 없다. 기본 리스트에서 append()와 pop()메서드를 이용하면 스택 자료구조와 동일하게 동작한다.

stack = []

stack.append(5) 
stack.append(2)
stack.append(3)
stack.append(7)
stack.append(5)
stack.pop()
stack.append(1)
stack.append(4)
stack.pop


print(stack)
print(stack[::-1])
큐
큐? 대기 줄에 비유 할 수 있다. 선입선출

흔히 놀이공원에서 줄을 서는 것처럼 생각. 먼저 온 사람이 먼저 들어가는 '공정한 자료구조'

파이썬으로 큐를 구현할 때는 collections 모듈에서 제공하는 deque 자료구조를 사용.
deque는 스택과 큐의 장점을 모두 채택한것인데 데이터를 넣고 빼는 속도가 리스트 자료형에 비해 효율적이며 queque라이브러리를 이용하는 것보다 더 간단하다. 더불어 대부분의 코테에서는 collections와 같은 모듈을 기본라이브러리 사용을 허용함.

from collections import deque

queue = deque()

queue.append(5)
queue.append(2)
queue.append(3)
queue.append(7)
queue.popleft()
queue.append(1)
queue.append(4)
queue.popleft()
print(queue)
queue.reverse()
print(queue)
재귀함수
재귀함수란? 자기 자신을 다시 호출하는 함수를 의미

def recursive_function():
	print("재귀 함수를 호출합니다.")
    recursive_function()
    
    
    
recursive_function()
위의 함수를 실행하면 "재귀 함수를 호출합니다."이 무한하게 나온다.
그러다가 오류 발생.

def recursive_function(i) : 


  if i == 100:
    return


  print(i, '번째 재귀 함수에서', i + 1, '번째 재귀 함수를 호출합니다')
  recursive_function(i + 1)
  print(i, "번째 재귀 함수를 종료합니다.")


recursive_function(1)
컴퓨터 내부에서 재귀 함수의 수행은 스택 자료구조를 이용함.
따라서 스택 자료구조를 활용해야 하는 상당수 알고리즘은 재귀 함수를 이용해서 간편하게 구현할 수 있다. ex) DFS

*재귀 함수를 이용하는 대표적인 예제


#반복적으로 구현한 n!
def factorial_iterative(n):
    result = 1


    for i in range(1, n + 1):
      result *= i 
    return result

#재귀적으로 구현한 n!
def factorial_recursive(n):
    if n <= 1:
      return 1
    return n * factorial_recursive(n-1)

print(factorial_iterative(5))
print(factorial_recursive(5))
실행결과는 동일하다. 그렇다면 반복문 대신에 재귀함수를 사용했을 때 얻을 수 있는 장점은?
=> 수학의 점화식(재귀식)을 그대로 소스코드로 옮길 수 있기 때문에 코드가 더 간결

탐색 알고리즘 DFS/BFS
<그래프 기본구조>

그래프는 노드(Node)와 간선(edge)으로 표현되며 이때 노드를 정점(Vertex)라고도 말한다.

그래프 탐색이란 하나의 노드를 시작으로 다수의 노드를 방문하는 것을 말한다.

두 노드가 간선으로 연결되어 있다면 '두 노드는 인접하다'라고 표현한다.

프로그래밍에서 그래프는 2가지 방식으로 표현 할 수 있음.

<인접 행렬(Adjacency Matrix)> : 2차원 배열로 그래프의 연결 관계를 표현하는 방식

-> 노드 개수가 많을수록 메모리가 불필요하게 낭비된다.

INF = 99999999999999 #무한의 비용 선언

#이차원 리스트를 이용해 인접 행렬 표현

graph = [
  [0, 7, 5],
  [7, 0, INF],
  [5, INF, 0]
]
<인접 리스트(Adjacency List)> : 리스트로 그래프의 연결관계를 표현하는 방식
=> 2차원 리스트를 이용하면 된다!

-> 연결된 정보만을 저장하기 때문에 메모리를 효율적으로
-> 그러나 특정한 두 노드가 연결되어 있는지에 대한 정보를 얻는 속도가 느리다.

#행(Row)이 3개인 2차원 리스트로 인접 리스트 표현
graph = [[] for _ in range(3)]

#노드 0에 연결된 노드 정보 저장(노드, 거리)
graph[0].append((1,7))
graph[0].append((2,5))

#노드 1에 연결된 노드 정보 저장(노드, 거리)
graph[1].append((0,7))


#노드 2에 연결된 노드 정보 저장(노드, 거리)
graph[2].append((0,5))


print(graph)
DFS
동작원리 : 스택, 구현방법 : 재귀함수 이용

Depth-First Search, 깊이 우선 탐색이라고도 부르며, 그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘이다.
이 알고리즘은 특정한 경로로 탐색하다가 특정한 상황에서 최대한 깊숙이 들어가서 노드를 방문한후, 다시 돌아가 다른 경로로 탐색하는 알고리즘이다.

스택 자료구조에 기초함. 실제로는 스택을 쓰지 않아도 되고 탐색을 수행함에 있어서 데이터의 개수가 N개인 경우 O(N)의 시간이 소요

DFS는 스택을 이용하는 알고리즘이기 때문에 실제 구현은 재귀 함수를 이용했을 때 매우 간결

<구체적인 동작 과정>

1) 탐색 시작 노드를 스택에 삽입하고 방문 처리를 한다.
2) 스택의 최상단 노드에 방문하지 않은 인접 노드가 있으면 그 인접 노드를 스택에 넣고 방문 처리를 한다. 방문하지 않은 인접 노드가 없으면 스택에서 최상단 노드를 꺼낸다.
3) 2)번의 과정을 더 이상 수행할 수 없을 때까지 반복한다.

tip) 일반적으로 인접한 노드 중에서 방문하지 않은 노드가 여러 개 있으면 번호가 낮은 순서부터 처리한다. / '방문처리'는 스택에 한 번 삽입되어 처리된 노드가 다시 삽입되지 않게 체크하는 것을 의미한다. 방문 처리를 함으로써 각 노드를 한 번씩만 처리할 수 있다.


def dfs(graph, v, visetd):
  #현재 노드를 방문 처리
  visetd[v] = True
  print(v, end= ' ')
  #현재 노드와 연결된 다른 노드를 재귀적으로 방문
  for i in graph[v]:
    if not visetd[i]:
        dfs(graph, i, visetd)

#각 노드가 연결된 정보를 리스트 자료형으로 표현(2차원 리스트)
graph = [
[],
[2,3,8],
[1,7],
[1,4,5],
[3,5],
[3,4],
[7],
[2,6,8],
[1,7]

]

#각 노드가 방문된 정보를 리스트 자료형으로 표현(1차원 리스트)
visted = [False] * 9



dfs(graph, 1, visted)
BFS
동작 원리 : 큐, 구현 방법 : 큐 자료구조 이용

Breadth First Search 알고리즘은 '너비 우선 탐색' 이라는 의미를 가진다. 쉽게 말해 가까운 노드 부터 탐색하는 알고리즘이다.
DFS는 최대한 멀리 있는 노드를 우선으로 탐색하는 방식으로 동작한다고 했는데, BFS는 그 반대다.

BFS 구현에서는 선입선출 방식인 큐 자료구조를 이용하는 것이 정석. 실제로 구현함에 있어 앞서 언급한 대로 deque 라이브러리를 사용하는 것이 좋으며 탐색을 수행함에 있어 O(N)의 시간이 소요

일반적인 경우 실제 수행 시간은 DFS보다 좋은 편

인전한 노드를 반복적으로 큐에 넣도록 알고리즘을 작성하면 자연스럽게 먼저 들어온 것이 먼저 나가게 되어, 가까운 노드부터 탐색을 진행하게 된다.

<구체적인 동작 과정>

1) 탐색 시작 노드를 큐에 삽입하고 방문 처리를 한다.

2) 큐에서 노드를 꺼내 해당 노드의 인접 노드 중에서 방문하지 않은 노드를 모두 큐에 삽입하고 방문 처리를 한다.

3) 2)번의 과정을 더 이상 수행할 수 없을 때까지 반복한다.

from collections import deque



def bfs(sraph, start, visted):

  #큐(queue) 구현을 위해 deque라이브러리르 사용
  queue = deque([start])
  #현재 노드를 방문 처리
  visted[start] = True
  #큐가 빌 때가지 반복
  while True:
    #큐에서 하나의 원소를 뽑아 출력
    v = queue.popleft()
    print(v, end=" ")
    #해당 원소와 연결된, 아직 방문하지 않은 원소들을 큐에 삽입
    for i in graph[v]:
      if not visted[i]:
        queue.append(i)
        visted[i] = True


#각 노드가 연결된 정보를 리스트 자료형으로 표현(2차원 리스트)
graph = [
[],
[2,3,8],
[1,7],
[1,4,5],
[3,5],
[3,4],
[7],
[2,6,8],
[1,7]

]

#각 노드가 방문된 정보를 리스트 자료형으로 표현(1차원 리스트)
visted = [False] * 9



bfs(graph, 1, visted)
코테 중 2차원 배열에서의 탐색 문제를 만나면 그래프 형태로 바꾸어서 생각해보기!

실전문제3) 음료수 얼려 먹기
n, m = map(int, input().split())


#2차원 리스트의 맵 정보 입력받기 
graph = []

for i in range(n):
  graph.append(list(map(int, input())))



#DFS로 특정한 노드를 방문한 뒤에 연결된 모든 노드들도 방문


def dfs(x, y):
  #주어진 범위를 벗어나는 경우에는 즉시 종료
  if x <= -1 or x >= n or y <= -1 or y >= m:
    return False

  #현재 노드를 아직 방문하지 않았다면
  if graph[x][y] == 0:
    #해당 노드를 방문처리
    graph[x][y] = 1
    #상, 하 , 좌, 우의 위치도 모두 재귀적으로 호출
    dfs(x-1, y)
    dfs(x, y-1)
    dfs(x +1, y)
    dfs(x, y+1)
    return True
  return False


#모든 노드(위치)에 대하여 음료수 채우기

result = 0
for i in range(n):
  for j in range(m):
    #현재 위치에서 DFS수행
    if dfs(i, j) == True:
      result += 1

print(result)
실전문제4) 미로 탈출
from collections import deque



#N, M을 공백으로 구분하여 입력받기

n, m = map(int, input().split())

#2차원 리스트의 맵 정보 입력받기
graph = []
for i in range(n):
  graph.append(list(map(int, input())))



#이동할 네 방향 정의(상, 하 , 좌, 우)
dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]


#BFS 소스코드 구현

def bfs(x, y):

  #큐(queue) 구현을 위해 deque라이브러리 사용
  queue = deque()
  queue.append((x,y))

  #큐가 빌 때가지 반복
  while queue:
    x, y = queue.popleft()
    #현재 위치에서 네 방향으로의 위치 확인
    for i in range(4):
      nx = x + dx[i]
      ny = y + dy[i]
      #미로 찾기 공간을 벗어난 경우 무시
      if nx < 0 or ny < 0 or nx >= n or ny >= m :
        continue

      # 괴물이 있으면 못가니깐!
      if graph[nx][ny] == 0:
        continue

      #해당 노드를 처음 방문하는 경우에만 최단 거리 기록
      if graph[nx][ny] == 1:
        graph[nx][ny] = graph[x][y] + 1
        queue.append((nx, ny))

  # 가장 오른쪽 아래까지의 최단 거리 반환
  return graph[n-1][m-1]



#bfs를 수행한 결과 출력
print(bfs(0,0))